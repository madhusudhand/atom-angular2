'.source.ts, .source.tsx':
    'reference':
        'prefix': 'ref'
        'body': """
            /// <reference path="$1"/>
        """
    'AMD module name':
        'prefix': 'amd-mod'
        'body': """
            /// <amd-module name="$1"/>
        """
    'AMD dependency':
        'prefix': 'amd-dep'
        'body': """
            /// <amd-dependency path="$1"/>
        """
    'import from':
        'prefix': 'import'
        'body': """
            import { ${1} } from '${2:path}';$3
        """
    'import require':
        'prefix': 'importr'
        'body': """
            import ${1} = require("${2}");$3
        """
    'JSDoc single line':
        'prefix': '//'
        'body': """
            /** $1 */
        """
    'JSDoc multi line':
        'prefix': '///'
        'body': """
            /**
             * $1
             */
        """
    'console.log':
        'prefix': 'log'
        'body': """
            console.log(${1:'message'});${2}
        """
    'if':
        'prefix': 'if'
        'body': """
            if (${1:true}) {
                $2
            }
        """
    'ifelse':
        'prefix': 'ifel'
        'body': """
            if (${1:true}) {
                $2
            } else {}
        """
    'while':
        'prefix': 'while'
        'body': """
            while (${1:true}) {
                $2
            }
        """
    'interface':
        'prefix': 'interface'
        'body': """
            interface ${1:Name} {
                $2
            }
        """
    'class':
        'prefix': 'class'
        'body': """
            class ${1:Name} {
                $2
            }
        """
    'namespace':
        'prefix': 'namespace'
        'body': """
            namespace ${1:name} {
                $2
            }
        """
    'function':
        'prefix': 'function'
        'body': """
            function ${1:name}(${2:parameter}) {
                ${3:throw new Error("Not implemented yet");}
            }
        """
    'fatarrow':
        'prefix': 'arr'
        'body': """
            (${1:parameter}) => { ${2:return true;} }
        """
    'for':
        'prefix': 'for'
        'body': """
            for (let ${2:i} = 0; ${2:i} < ${1:array}.length; ${2:i}++) {
                ${1:array}[${2:i}]$3;
            }
        """
    'forof':
        'prefix': 'forof'
        'body': """
            for (let ${2:variable} of ${1:iterable}) {
                $3
            }
        """
    'forea':
        'prefix': 'forea'
        'body': """
            forEach(${1:variable} => {
                $2
            });
        """
    'forin':
        'prefix': 'forin'
        'body': """
            for (let ${2:key} in ${1:iterable}) {
                $3
            }
        """
    'externalmodule':
        'prefix': 'declaremodule'
        'body': """
            declare module "$1" {
                var $2:${3:any};
                export = $2;
            }$4
        """
    'transformer':
        'prefix': 'transform'
        'body': """
            transform:${1:null}{
                $2
            }transform:${1:null}
        """
